{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VGG16  _ Landcover multiclass classification model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and results for Learning Rate = 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 21600 images belonging to 10 classes.\n",
      "Found 2700 images belonging to 10 classes.\n",
      "Found 2700 images belonging to 10 classes.\n",
      "Epoch 1/10\n",
      "169/169 [==============================] - 4728s 28s/step - loss: 9.3410 - acc: 0.3490 - val_loss: 1.5624 - val_acc: 0.4630\n",
      "Epoch 2/10\n",
      "169/169 [==============================] - 2799s 17s/step - loss: 1.2490 - acc: 0.5728 - val_loss: 0.9160 - val_acc: 0.6896\n",
      "Epoch 3/10\n",
      "169/169 [==============================] - 2964s 18s/step - loss: 0.8407 - acc: 0.7209 - val_loss: 0.6368 - val_acc: 0.7993\n",
      "Epoch 4/10\n",
      "169/169 [==============================] - 2953s 17s/step - loss: 0.5821 - acc: 0.8177 - val_loss: 0.4877 - val_acc: 0.8519\n",
      "Epoch 5/10\n",
      "169/169 [==============================] - 2920s 17s/step - loss: 0.4391 - acc: 0.8686 - val_loss: 0.5667 - val_acc: 0.8381\n",
      "Epoch 6/10\n",
      "169/169 [==============================] - 2902s 17s/step - loss: 0.3750 - acc: 0.8908 - val_loss: 0.3672 - val_acc: 0.8915\n",
      "Epoch 7/10\n",
      "169/169 [==============================] - 2862s 17s/step - loss: 0.3198 - acc: 0.9062 - val_loss: 0.3301 - val_acc: 0.9085\n",
      "Epoch 8/10\n",
      "169/169 [==============================] - 2861s 17s/step - loss: 0.2944 - acc: 0.9190 - val_loss: 0.3042 - val_acc: 0.9137\n",
      "Epoch 9/10\n",
      "169/169 [==============================] - 2844s 17s/step - loss: 0.2458 - acc: 0.9334 - val_loss: 0.3115 - val_acc: 0.9089\n",
      "Epoch 10/10\n",
      "169/169 [==============================] - 2857s 17s/step - loss: 0.2359 - acc: 0.9355 - val_loss: 0.2622 - val_acc: 0.9285\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-2a688f6e4c20>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0mtest_probabilities\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 68\u001b[0;31m \u001b[0mtest_predictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_probabilities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     69\u001b[0m \u001b[0mtest_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m \u001b[0mclasses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_indices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.callbacks import TensorBoard, ReduceLROnPlateau\n",
    "import ssl\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_curve\n",
    "from keras.applications.inception_v3 import InceptionV3\n",
    "from keras.applications.vgg16 import VGG16\n",
    "\n",
    "\"\"\"Baseline model. RGB only, Resnet50 architecture.\"\"\"\n",
    "\n",
    "TRAIN_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/train'\n",
    "DEV_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/dev'\n",
    "TEST_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/test'\n",
    "\n",
    "\n",
    "ssl._create_default_https_context = ssl._create_unverified_context\n",
    "base_model = tf.keras.applications.VGG16(weights='imagenet', include_top=False)\n",
    "\n",
    "# Load data and split into train/validation\n",
    "# Note that there is no test set here!\n",
    "datagen = ImageDataGenerator(rescale=1./255) # set validation split\n",
    "train_generator = datagen.flow_from_directory(\n",
    "    TRAIN_DIRECTORY,\n",
    "    target_size=(64, 64),\n",
    "    class_mode='categorical',\n",
    "    shuffle = True,\n",
    "    batch_size = 128)\n",
    "validation_generator = datagen.flow_from_directory(\n",
    "    DEV_DIRECTORY,\n",
    "    target_size=(64, 64),\n",
    "    shuffle = True,\n",
    "    batch_size=128,\n",
    "    class_mode='categorical')\n",
    "test_generator = datagen.flow_from_directory(\n",
    "    TEST_DIRECTORY,\n",
    "    target_size=(64, 64),\n",
    "    batch_size=1, # batch size for test?\n",
    "    shuffle = False,\n",
    "    class_mode='categorical')\n",
    "\n",
    "\n",
    "\n",
    "tensorboard = TensorBoard(log_dir='/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/logs', histogram_freq=0,\n",
    "                          write_graph=True, write_images=False)\n",
    "call = ReduceLROnPlateau(monitor='val_loss')\n",
    "x = base_model.output\n",
    "x = tf.keras.layers.GlobalAveragePooling2D()(x)\n",
    "x = tf.keras.layers.Dense(1024, activation='relu', kernel_regularizer=keras.regularizers.l2(0.1))(x)\n",
    "predictions = tf.keras.layers.Dense(10, activation='softmax')(x)\n",
    "model = tf.keras.Model(inputs=base_model.input, outputs=predictions)\n",
    "\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "history = model.fit_generator(\n",
    "      train_generator,\n",
    "      epochs=10,\n",
    "      verbose=1,\n",
    "      validation_data = validation_generator,\n",
    "      callbacks=[tensorboard, call])\n",
    "\n",
    "\n",
    "# Compute metrics on test set\n",
    "loss, accuracy = model.evaluate_generator(test_generator)\n",
    "test_probabilities = model.predict_generator(test_generator)\n",
    "test_predictions = np.argmax(test_probabilities, axis = 1)\n",
    "test_labels = test_generator.classes\n",
    "classes = list(test_generator.class_indices.keys())\n",
    "print(confusion_matrix(test_labels, test_predictions))\n",
    "print(classification_report(test_labels, test_predictions, target_names=classes))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[281   2   1   0   0   3   9   0   4   4]\n",
      " [  0 303   2   0   0   0   0   0   0   0]\n",
      " [  3   5 234   3   3   1  22  22   1   0]\n",
      " [  0   0   0 236   0   0   2   1   9   0]\n",
      " [  0   0   0   3 238   0   0   9   0   0]\n",
      " [  5  20   6   0   0 168   1   0   4   1]\n",
      " [ 12   1  11   4   1   0 234   3   0   0]\n",
      " [  0   0   0   0   2   0   0 282   0   0]\n",
      " [ 11   0   4   7   1   1   2   1 236   1]\n",
      " [  3   1   0   0   0   0   0   0   0 276]]\n",
      "                      precision    recall  f1-score   support\n",
      "\n",
      "          AnnualCrop       0.89      0.92      0.91       304\n",
      "              Forest       0.91      0.99      0.95       305\n",
      "HerbaceousVegetation       0.91      0.80      0.85       294\n",
      "             Highway       0.93      0.95      0.94       248\n",
      "          Industrial       0.97      0.95      0.96       250\n",
      "             Pasture       0.97      0.82      0.89       205\n",
      "       PermanentCrop       0.87      0.88      0.87       266\n",
      "         Residential       0.89      0.99      0.94       284\n",
      "               River       0.93      0.89      0.91       264\n",
      "             SeaLake       0.98      0.99      0.98       280\n",
      "\n",
      "         avg / total       0.92      0.92      0.92      2700\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "loss, accuracy = model.evaluate_generator(test_generator)\n",
    "test_probabilities = model.predict_generator(test_generator)\n",
    "test_predictions = np.argmax(test_probabilities, axis = 1)\n",
    "test_labels = test_generator.classes\n",
    "classes = list(test_generator.class_indices.keys())\n",
    "print(confusion_matrix(test_labels, test_predictions))\n",
    "print(classification_report(test_labels, test_predictions, target_names=classes))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and results for Learning rate 0.0001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 21600 images belonging to 10 classes.\n",
      "Found 2700 images belonging to 10 classes.\n",
      "Found 2700 images belonging to 10 classes.\n",
      "Epoch 1/10\n",
      "169/169 [==============================] - 4280s 25s/step - loss: 48.2007 - acc: 0.8435 - val_loss: 31.7138 - val_acc: 0.8826\n",
      "Epoch 2/10\n",
      "169/169 [==============================] - 3668s 22s/step - loss: 21.5761 - acc: 0.9408 - val_loss: 13.7620 - val_acc: 0.9389\n",
      "Epoch 3/10\n",
      "169/169 [==============================] - 4288s 25s/step - loss: 9.1517 - acc: 0.9606 - val_loss: 5.7252 - val_acc: 0.9422\n",
      "Epoch 4/10\n",
      "169/169 [==============================] - 4127s 24s/step - loss: 3.7279 - acc: 0.9641 - val_loss: 2.3562 - val_acc: 0.9496\n",
      "Epoch 5/10\n",
      "169/169 [==============================] - 3839s 23s/step - loss: 1.5112 - acc: 0.9736 - val_loss: 1.0154 - val_acc: 0.9481\n",
      "Epoch 6/10\n",
      "169/169 [==============================] - 3085s 18s/step - loss: 0.6503 - acc: 0.9770 - val_loss: 0.5245 - val_acc: 0.9515\n",
      "Epoch 7/10\n",
      "169/169 [==============================] - 3034s 18s/step - loss: 0.3375 - acc: 0.9756 - val_loss: 0.2813 - val_acc: 0.9685\n",
      "Epoch 8/10\n",
      "169/169 [==============================] - 3041s 18s/step - loss: 0.1972 - acc: 0.9794 - val_loss: 0.2351 - val_acc: 0.9581\n",
      "Epoch 9/10\n",
      "169/169 [==============================] - 5180s 31s/step - loss: 0.1372 - acc: 0.9801 - val_loss: 0.1708 - val_acc: 0.9670\n",
      "Epoch 10/10\n",
      "169/169 [==============================] - 1802s 11s/step - loss: 0.1069 - acc: 0.9800 - val_loss: 0.1790 - val_acc: 0.9622\n",
      "[[284   0   0   0   0   2   3   0   7   8]\n",
      " [  0 286   3   0   0   3   0   0   2  11]\n",
      " [  2   3 275   0   3   1   6   0   2   2]\n",
      " [  1   0   1 237   5   0   0   0   4   0]\n",
      " [  0   0   0   0 250   0   0   0   0   0]\n",
      " [  3   3   5   0   0 186   2   0   2   4]\n",
      " [ 15   0   7   1   1   0 241   0   1   0]\n",
      " [  0   0   0   1   2   0   0 280   1   0]\n",
      " [  0   0   0   5   0   0   0   0 258   1]\n",
      " [  0   0   0   0   0   0   0   0   1 279]]\n",
      "                      precision    recall  f1-score   support\n",
      "\n",
      "          AnnualCrop       0.93      0.93      0.93       304\n",
      "              Forest       0.98      0.94      0.96       305\n",
      "HerbaceousVegetation       0.95      0.94      0.94       294\n",
      "             Highway       0.97      0.96      0.96       248\n",
      "          Industrial       0.96      1.00      0.98       250\n",
      "             Pasture       0.97      0.91      0.94       205\n",
      "       PermanentCrop       0.96      0.91      0.93       266\n",
      "         Residential       1.00      0.99      0.99       284\n",
      "               River       0.93      0.98      0.95       264\n",
      "             SeaLake       0.91      1.00      0.95       280\n",
      "\n",
      "         avg / total       0.95      0.95      0.95      2700\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.callbacks import TensorBoard, ReduceLROnPlateau\n",
    "import ssl\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_curve\n",
    "from keras.applications.inception_v3 import InceptionV3\n",
    "from keras.applications.vgg16 import VGG16\n",
    "import numpy as np\n",
    "\n",
    "\"\"\"Baseline model. RGB only, Resnet50 architecture.\"\"\"\n",
    "\n",
    "TRAIN_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/train'\n",
    "DEV_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/dev'\n",
    "TEST_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/test'\n",
    "\n",
    "\n",
    "ssl._create_default_https_context = ssl._create_unverified_context\n",
    "base_model = tf.keras.applications.VGG16(weights='imagenet', include_top=False)\n",
    "\n",
    "# Load data and split into train/validation\n",
    "# Note that there is no test set here!\n",
    "datagen = ImageDataGenerator(rescale=1./255) # set validation split\n",
    "train_generator = datagen.flow_from_directory(\n",
    "    TRAIN_DIRECTORY,\n",
    "    target_size=(64, 64),\n",
    "    class_mode='categorical',\n",
    "    shuffle = True,\n",
    "    batch_size = 128)\n",
    "validation_generator = datagen.flow_from_directory(\n",
    "    DEV_DIRECTORY,\n",
    "    target_size=(64, 64),\n",
    "    shuffle = True,\n",
    "    batch_size=128,\n",
    "    class_mode='categorical')\n",
    "test_generator = datagen.flow_from_directory(\n",
    "    TEST_DIRECTORY,\n",
    "    target_size=(64, 64),\n",
    "    batch_size=1, # batch size for test?\n",
    "    shuffle = False,\n",
    "    class_mode='categorical')\n",
    "\n",
    "\n",
    "\n",
    "tensorboard = TensorBoard(log_dir='/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/logs2', histogram_freq=0,\n",
    "                          write_graph=True, write_images=False)\n",
    "call = ReduceLROnPlateau(monitor='val_loss')\n",
    "x = base_model.output\n",
    "x = tf.keras.layers.GlobalAveragePooling2D()(x)\n",
    "x = tf.keras.layers.Dense(1024, activation='relu', kernel_regularizer=keras.regularizers.l2(0.1))(x)\n",
    "predictions = tf.keras.layers.Dense(10, activation='softmax')(x)\n",
    "model = tf.keras.Model(inputs=base_model.input, outputs=predictions)\n",
    "\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "history = model.fit_generator(\n",
    "      train_generator,\n",
    "      epochs=10,\n",
    "      verbose=1,\n",
    "      validation_data = validation_generator,\n",
    "      callbacks=[tensorboard, call])\n",
    "\n",
    "\n",
    "# Compute metrics on test set\n",
    "loss, accuracy = model.evaluate_generator(test_generator)\n",
    "test_probabilities = model.predict_generator(test_generator)\n",
    "test_predictions = np.argmax(test_probabilities, axis = 1)\n",
    "test_labels = test_generator.classes\n",
    "classes = list(test_generator.class_indices.keys())\n",
    "print(confusion_matrix(test_labels, test_predictions))\n",
    "print(classification_report(test_labels, test_predictions, target_names=classes))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def plot_confusion_matrix(cm,\n",
    "                          target_names,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=None,\n",
    "                          normalize=True):\n",
    "    \"\"\"\n",
    "    given a sklearn confusion matrix (cm), make a nice plot\n",
    "\n",
    "    Arguments\n",
    "    ---------\n",
    "    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n",
    "\n",
    "    target_names: given classification classes such as [0, 1, 2]\n",
    "                  the class names, for example: ['high', 'medium', 'low']\n",
    "\n",
    "    title:        the text to display at the top of the matrix\n",
    "\n",
    "    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n",
    "                  see http://matplotlib.org/examples/color/colormaps_reference.html\n",
    "                  plt.get_cmap('jet') or plt.cm.Blues\n",
    "\n",
    "    normalize:    If False, plot the raw numbers\n",
    "                  If True, plot the proportions\n",
    "\n",
    "    Usage\n",
    "    -----\n",
    "    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n",
    "                                                              # sklearn.metrics.confusion_matrix\n",
    "                          normalize    = True,                # show proportions\n",
    "                          target_names = y_labels_vals,       # list of names of the classes\n",
    "                          title        = best_estimator_name) # title of graph\n",
    "\n",
    "    Citiation\n",
    "    ---------\n",
    "    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n",
    "\n",
    "    \"\"\"\n",
    "    import matplotlib.pyplot as plt\n",
    "    import numpy as np\n",
    "    import itertools\n",
    "\n",
    "    accuracy = np.trace(cm) / float(np.sum(cm))\n",
    "    misclass = 1 - accuracy\n",
    "\n",
    "    if cmap is None:\n",
    "        cmap = plt.get_cmap('Blues')\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "\n",
    "    if target_names is not None:\n",
    "        tick_marks = np.arange(len(target_names))\n",
    "        plt.xticks(tick_marks, target_names, rotation=45)\n",
    "        plt.yticks(tick_marks, target_names)\n",
    "\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "\n",
    "\n",
    "    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        if normalize:\n",
    "            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n",
    "                     horizontalalignment=\"center\",\n",
    "                     color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "        else:\n",
    "            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n",
    "                     horizontalalignment=\"center\",\n",
    "                     color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(test_labels, test_predictions)\n",
    "\n",
    "plot_confusion_matrix(cm, \n",
    "                      normalize    = False,\n",
    "                      target_names = classes,\n",
    "                      title        = \"Confusion Matrix\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
