import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.callbacks import TensorBoard, ReduceLROnPlateau
import ssl
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import roc_curve
from keras.applications.inception_v3 import InceptionV3
from keras.applications.vgg16 import VGG16
import numpy as np

"""Baseline model. RGB only, Resnet50 architecture."""

TRAIN_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/train'
DEV_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/dev'
TEST_DIRECTORY = '/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/test'


ssl._create_default_https_context = ssl._create_unverified_context
base_model = tf.keras.applications.VGG16(weights='imagenet', include_top=False)

# Load data and split into train/validation
# Note that there is no test set here!
datagen = ImageDataGenerator(rescale=1./255) # set validation split
train_generator = datagen.flow_from_directory(
    TRAIN_DIRECTORY,
    target_size=(64, 64),
    class_mode='categorical',
    shuffle = True,
    batch_size = 128)
validation_generator = datagen.flow_from_directory(
    DEV_DIRECTORY,
    target_size=(64, 64),
    shuffle = True,
    batch_size=128,
    class_mode='categorical')
test_generator = datagen.flow_from_directory(
    TEST_DIRECTORY,
    target_size=(64, 64),
    batch_size=1, # batch size for test?
    shuffle = False,
    class_mode='categorical')



tensorboard = TensorBoard(log_dir='/Users/rubirodriguez/Documents/Documents/CS230DeepLearning/Project/satellite_rgb_dataset/logs2', histogram_freq=0,
                          write_graph=True, write_images=False)
call = ReduceLROnPlateau(monitor='val_loss')
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(1024, activation='relu', kernel_regularizer=keras.regularizers.l2(0.1))(x)
predictions = tf.keras.layers.Dense(10, activation='softmax')(x)
model = tf.keras.Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit_generator(
      train_generator,
      epochs=10,
      verbose=1,
      validation_data = validation_generator,
      callbacks=[tensorboard, call])
      
      


# Compute metrics on test set
loss, accuracy = model.evaluate_generator(test_generator)
test_probabilities = model.predict_generator(test_generator)
test_predictions = np.argmax(test_probabilities, axis = 1)
test_labels = test_generator.classes
classes = list(test_generator.class_indices.keys())
print(confusion_matrix(test_labels, test_predictions))
print(classification_report(test_labels, test_predictions, target_names=classes))


# Confussion Matrix
def plot_confusion_matrix(cm,
                          target_names,
                          title='Confusion matrix',
                          cmap=None,
                          normalize=True):
    """
    given a sklearn confusion matrix (cm), make a nice plot

    Arguments
    ---------
    cm:           confusion matrix from sklearn.metrics.confusion_matrix

    target_names: given classification classes such as [0, 1, 2]
                  the class names, for example: ['high', 'medium', 'low']

    title:        the text to display at the top of the matrix

    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm
                  see http://matplotlib.org/examples/color/colormaps_reference.html
                  plt.get_cmap('jet') or plt.cm.Blues

    normalize:    If False, plot the raw numbers
                  If True, plot the proportions

    Usage
    -----
    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by
                                                              # sklearn.metrics.confusion_matrix
                          normalize    = True,                # show proportions
                          target_names = y_labels_vals,       # list of names of the classes
                          title        = best_estimator_name) # title of graph

    Citiation
    ---------
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html

    """
    import matplotlib.pyplot as plt
    import numpy as np
    import itertools

    accuracy = np.trace(cm) / float(np.sum(cm))
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('Blues')

    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]


    thresh = cm.max() / 1.5 if normalize else cm.max() / 2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")


    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))
    plt.show()
    
    
    
cm = confusion_matrix(test_labels, test_predictions)

plot_confusion_matrix(cm, 
                      normalize    = False,
                      target_names = classes,
                      title        = "Confusion Matrix")
